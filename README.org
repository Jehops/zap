** Overview
   zap automates the management of zfs snapshots.  With a few crontab entries, it can be used to create a comprehensive zfs backup system.  There are no configuration files.  All parameters are supplied on the command line or in zfs properties and all snapshot information is stored in snapshot names.

   zap plays nice with manually created snapshots or snapshots from other tools.  It will only operate on snapshots it creates.

** Synopsis
   =% zap snap|snapshot [-dLSv] TTL [[-r] dataset]...=

   =% zap rep|replicate [-dLSv] [[user@]host:parent_dataset [-r] dataset [[-r] dataset]...]=

   =% zap destroy [-dlsv] [host[,host]...]=

   =% zap -v | -version | --version=
** Subcommands
   =snap= | =snapshot=

   Use the =snap= subcommand to create snapshots that will expire after =TTL= (time to live) has elapsed.  An expired snapshot will be destroyed the next time =zap destroy= is run.  =TTL= takes the form =[0-9]{1,4}[dwmy]=.  That is, one to four digits followed by a character to represent the time unit
(day, week, month, or year). If datasets are not not supplied on the command line, snapshots will be created for datasets with the property =zap:snap= set to 'on'.

   =rep= | =replicate=

   Use the =rep= subcommand to replicate datasets.  If a destination and datasets are not supplied on the command line, datasets with a destination set in the =zap:rep= user property are replicated.


   =destroy=

   Use the =destroy= subcommand to destroy expired snapshots.  By default, only snapshots originating
from the local host are destroyed.  If a comma separated list of hosts are specified, then only destroy snapshots originating from those hosts. Hosts are specified without any domain information, that is, as returned by =hostname -s=.

** Options

   =-v= | =-version= | =--version= Show the version.

*** Subcommand options

    =-d=  Operate on snapshots, even when the pool is in a DEGRADED state.

    =-L=  Do not operate on snapshots if the pool has a resilver in progress.  This is the default for the =destroy= subcommand.

    =-l=  Operate on snapshots, even if the pool has a resilver in progress.  This is the default for the
=snap= and =rep= subcommands.

    =-S=  Do not operate on snapshots if the pool is being scrubbed.  This is the default for the =destroy= subcommand.

    =-s=  Operate on snapshots, even if the pool is being scrubbed.  This is the default for the =snap=
and =rep= subcommands.

    =-r=  Recursively create or replicate snapshots of all descendents.

    =-v=  Be verbose.

** Examples
   Create snapshots that will expire after 3 weeks.
#+BEGIN_SRC sh
   % zap snap 3w zroot/usr/home/nox zroot/var
#+END_SRC

   Recursively create snapshots that will expire after one day.  Be verbose.
#+BEGIN_SRC sh
   % zap snap -v 1d -r zroot/usr/home
#+END_SRC

   Create snapshots (recursively for tank and zroot/var) even if the pool is DEGRADED.  The snapshots will expire after three weeks.  Be verbose.
#+BEGIN_SRC sh
   % zap snap -dv 3w -r tank -r zroot/var zroot/usr/home/nox
#+END_SRC

   Create snapshots for datasets with the =zap:snap= property set to on.
#+BEGIN_SRC sh
   % zap snap 1d
   % zap snap 3w
#+END_SRC

   Replicate datasets (recursively for zroot/ROOT) to the remote host bravo, under the rback/phe dataset.
#+BEGIN_SRC sh
   % zap rep zap@bravo:rback/phe -r zroot/ROOT zroot/usr/home/jrm
#+END_SRC

   Destroy expired snapshots.  Be verbose.
#+BEGIN_SRC sh
   % zap destroy -v
#+END_SRC

   Destroy expired snapshots that originated from either the host awarnach or
   the host gly.  Be verbose.
#+BEGIN_SRC sh
   % zap destroy -v awarnach,gly
#+END_SRC

     Crontab entries for rolling snapshots and remote replication.

     Note:
     - Refer to http://ftfl.ca/blog/2016-12-27-zfs-replication.html for a detailed description of a backup and replication strategy.
     - Snapshots are created for datasets with the =zap:snap= property set to 'on'.
     - Datasets with the =zap:rep= property set are replicated.
     - Taking snapshots is normally cheap, so do it often. Destroying snapshots can thrash disks, so only do it every 24 hours.
     - This example uses the system crontab file, so an extra =who= field is included.
     - Appropriate zfs permissions must be set for the =zap= user.
     - Cron must be aware of the full path to =zap=, since the full path is not used in these entries.

#+BEGIN_SRC sh
SHELL=/bin/sh
PATH=/etc:/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin

#minute	hour	mday	month	wday	who	command

# take snapshots
*/5	*	*	*	*	zap	zap snap 1d
14	*/4	*	*	*	zap	zap snap 1w
14	00	*	*	1	zap	zap snap 1m

# destroy snapshots
44	04	*	*	*	root	zap destroy

# replicate datasets
54	*/1	*	*	*	zap     zap rep
#+END_SRC
** Authors and Contributors
   - Joseph Mingrone <jrm@ftfl.ca>
   - Tobias Kortkamp <t@tobik.me>
** License
   zap is released under a BSD 2-Clause License.  Refer to the header of each
   source file for details.

-----

zap was influenced by zfSnap, which is under a BEER-WARE license.  We owe the author a beer.
